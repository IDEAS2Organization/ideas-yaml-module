{
    "id": "ideas-oai-spec-language",
    "extension": "oai-spec",
    "name": "OAI Specification",
    "formats": [
        {
            "format": "yaml",
            "editorModeId": "ace/mode/yaml",
            "_editorModeURI": "mode-yaml.js",
            "editorThemeId": "ace/theme/at",
            "_editorThemeURI": "theme-at.js",
            "checkLanguage": "false"
        },
        {
            "format": "json",
            "editorModeId": "ace/mode/json",
            "_editorModeURI": "mode-json.js",
            "editorThemeId": "ace/theme/at",
            "_editorThemeURI": "theme-at.js",
            "checkLanguage": "false"
        }
    ],
    "operations": [
        {
            "id": "buildAgreement",
            "name": "Build agreement",
            "data": {},
            "_remoteExecution": "false",
            "action": "function(operation, fileUri, result) { var newUri = EditorManager.currentUri.substring(0, EditorManager.currentUri.lastIndexOf('/')) + '/plans'; const repoExternalURL = 'https://repo.designer.governify.io'; const repoInternalURL = 'http://repo.designer.governify.io:10880'; var relativeExternalPath = repoExternalURL.concat('/DemoMaster/Resources/sla4oaiDemo'); var accessToken = '165a1761634db1e9bd304ea6f3ffcf2b'; const accessTokenParam = '?accessToken='.concat(accessToken); var plansAgContent = ''; var plansCtlContent = ''; var plansAngContent = ''; var oasDocument = jsyaml.safeLoad(EditorManager.getCurrentEditorContent()); newUri.concat('.oai-at') in EditorManager.tabsMap && EditorManager.deleteNode(newUri.concat('.oai-at'), !1, function () { }), newUri.concat('.ctl') in EditorManager.tabsMap && EditorManager.deleteNode(newUri.concat('.ctl'), !1, function () { }), newUri + '.ang' in EditorManager.tabsMap && EditorManager.deleteNode(newUri + '.ang', !1, function () { }), EditorManager.currentUri.substring(0, EditorManager.currentUri.lastIndexOf('/')).concat('access-token.json') in EditorManager.tabsMap && EditorManager.deleteNode(EditorManager.currentUri.substring(0, EditorManager.currentUri.lastIndexOf('/')).concat('/access-token.json'), !1, function () { }), $.ajax({ url: relativeExternalPath.concat('/plans.oai-at').concat(accessTokenParam), method: 'GET', timeout: 36e5 }).done(function (data, textStatus, res) { 200 !== res.status ? console.error(res) : (plansAgContent = data, $.ajax({ url: relativeExternalPath.concat('/plans.ctl').concat(accessTokenParam), method: 'GET', timeout: 36e5 }).done(function (data, textStatus, res) { 200 !== res.status ? console.error(res) : (plansCtlContent = data, $.ajax({ url: relativeExternalPath.concat('/plans.ang').concat(accessTokenParam), method: 'GET', timeout: 36e5 }).done(function (data, textStatus, res) { 200 !== res.status ? console.error(res) : (plansAngContent = data, $.ajax({ url: relativeExternalPath.concat('/access-token.json').concat(accessTokenParam), method: 'GET', timeout: 36e5 }).done(function (data, textStatus, res) { if (200 !== res.status) console.error(res); else { var t = data; console.info('access', t), EditorManager.createNode(EditorManager.currentUri.substring(0, EditorManager.currentUri.lastIndexOf('/')) + '/access-token.json', 'access-token', '.json', function () { EditorManager.saveFile(EditorManager.currentUri.substring(0, EditorManager.currentUri.lastIndexOf('/')).concat('/access-token.json'), t, function () { EditorManager.createNode(newUri.concat('.oai-at'), 'plans', '.oai-at', function () { var sla4oai = jsyaml.safeLoad(plansAgContent); sla4oai.context.api = repoInternalURL.concat('/').concat(principalUserName).concat('/').concat(EditorManager.currentUri).concat(accessTokenParam), EditorManager.saveFile(newUri.concat('.oai-at'), jsyaml.safeDump(sla4oai), function () { EditorManager.createNode(newUri.concat('.ctl'), 'plans', '.ctl', function () { EditorManager.saveFile(newUri.concat('.ctl'), plansCtlContent, function () { EditorManager.createNode(newUri.concat('.ang'), 'plans', '.ang', function () { EditorManager.saveFile(newUri.concat('.ang'), plansAngContent, function () { var sla4oaiDocumentURL = repoInternalURL.concat('/').concat(principalUserName).concat('/').concat(EditorManager.currentUri.substring(0, EditorManager.currentUri.lastIndexOf('/'))).concat('/plans.oai-at').concat(accessTokenParam); if (oasDocument.openapi && oasDocument.openapi.startsWith('3.')) { console.log('OAS 3.x adjustments'); delete oasDocument.servers; oasDocument.info['x-sla'] = sla4oaiDocumentURL; } else if ((oasDocument.openapi && oasDocument.openapi.startsWith('2.')) || oasDocument.swagger && oasDocument.swagger.startsWith('2.')) { console.log('OAS 2.x adjustments'); delete oasDocument.host; delete oasDocument.basePath; oasDocument.info['x-sla'] = sla4oaiDocumentURL; } else { console.log('Warning: OAS version not found, no adjustments will be made'); } document.editor.setValue(jsyaml.safeDump(oasDocument)), console.info('ok'), setTimeout(function () { EditorManager.openFile(newUri.concat('.oai-at')); CommandApi.echo('<span style=\"user-select: text;\">Gateway URL: <a href=\"https://gateway.oai.governify.io\" target=\"_blank\">https://gateway.oai.governify.io</a></span>'); CommandApi.echo('<span style=\"user-select: text;\">OAS URL: <a href=\"' + sla4oai.context.api.replace(repoInternalURL, repoExternalURL) + '\" target=\"_blank\">' + sla4oai.context.api.replace(repoInternalURL, repoExternalURL) + '</a></span>'); CommandApi.echo('<span style=\"user-select: text;\">OAS URL (internal): <p>' + sla4oai.context.api.replace(repoExternalURL, repoInternalURL) + '</p></span>'); CommandApi.echo('<span style=\"user-select: text;\">Note that internal Governify tools will use this base URL \"' + repoInternalURL + '\" instead of \"' + repoExternalURL + '\"</span>'); }, 1150); }); }); }); }); }); }); }); }); } }).fail(function (e, n, a) { console.error(a); }).fail(function (e, n, a) { console.error(a); })); }).fail(function (e, n, a) { console.error(a); })) }).fail(function (e, n, a) { console.error(a); })); }); }"
        },
        {
            "id": "getEndpoints",
            "name": "Get endpoints",
            "data": {},
            "_remoteExecution": "false",
            "action": "function(operation, fileUri, result) { const repoExternalURL = 'https://repo.designer.governify.io'; const repoInternalURL = 'http://repo.designer.governify.io:10880'; var relativeExternalPath = repoExternalURL.concat('/DemoMaster/Resources/sla4oaiDemo'); var accessToken = '165a1761634db1e9bd304ea6f3ffcf2b'; const accessTokenParam = '?accessToken='.concat(accessToken); var plansAgContent = ''; $.ajax({ url: relativeExternalPath.concat('/plans.oai-at').concat(accessTokenParam), method: 'GET', timeout: 36e5 }).done(function (data, textStatus, res) { 200 !== res.status ? console.error(res) : (plansAgContent = data, $.ajax({ url: relativeExternalPath.concat('/plans.ctl').concat(accessTokenParam), method: 'GET', timeout: 36e5 }).done(function (data, textStatus, res) { 200 !== res.status ? console.error(res) : (plansCtlContent = data, $.ajax({ url: relativeExternalPath.concat('/plans.ang').concat(accessTokenParam), method: 'GET', timeout: 36e5 }).done(function (data, textStatus, res) { 200 !== res.status ? console.error(res) : (plansAngContent = data, $.ajax({ url: relativeExternalPath.concat('/access-token.json').concat(accessTokenParam), method: 'GET', timeout: 36e5 }).done(function (data, textStatus, res) { if (200 !== res.status) console.error(res); else { var sla4oai = jsyaml.safeLoad(plansAgContent); sla4oai.context.api = repoInternalURL.concat('/').concat(principalUserName).concat('/').concat(EditorManager.currentUri).concat(accessTokenParam); CommandApi.echo('<span style=\"user-select: text;\">Gateway URL: <a href=\"https://gateway.oai.governify.io\" target=\"_blank\">https://gateway.oai.governify.io</a></span>'); CommandApi.echo('<span style=\"user-select: text;\">OAS URL: <a href=\"' + sla4oai.context.api.replace(repoInternalURL, repoExternalURL) + '\" target=\"_blank\">' + sla4oai.context.api.replace(repoInternalURL, repoExternalURL) + '</a></span>'); CommandApi.echo('<span style=\"user-select: text;\">OAS URL (internal): <p>' + sla4oai.context.api.replace(repoExternalURL, repoInternalURL) + '</p></span>'); CommandApi.echo('<span style=\"user-select: text;\">Note that internal Governify tools will use this base URL \"' + repoInternalURL + '\" instead of \"' + repoExternalURL + '\"</span>'); } }).fail(function (e, n, a) { console.error(a); }).fail(function (e, n, a) { console.error(a); })); }).fail(function (e, n, a) { console.error(a); })) }).fail(function (e, n, a) { console.error(a); })); }); }"
        }
    ],
    "templateProjects": null,
    "templateFiles": null,
    "inspectorLoader": "function(loader, format) {}"
}